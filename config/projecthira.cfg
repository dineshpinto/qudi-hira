# =========================================
#  Qudi configuration file for Project Hira
# =========================================

global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    module_server:
        address: 'localhost'
        port: 12345

    # For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    nicard:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        photon_sources:
            - '/Dev1/PFI0'
        clock_channel: '/Dev1/Ctr0'
        default_clock_frequency: 100 # optional, in Hz
        counter_channels:
            - '/Dev1/Ctr1'
        counter_ai_channels:
            - '/Dev1/AI0'
        default_scanner_clock_frequency: 100 # optional, in Hz
        scanner_clock_channel: '/Dev1/Ctr2'
        odmr_trigger_channel: '/Dev2/PFI12'
        pixel_clock_channel: '/Dev1/PFI6'
        counting_edge_rising: True
        gate_in_channel:
            - '/Dev1/PFI13'
        scanner_ao_channels:
            - '/Dev1/AO0'
            - '/Dev1/AO1'
            - '/Dev1/AO2'
        scanner_ai_channels:
            - '/Dev1/AI1'
        scanner_counter_channels:
            - '/Dev1/Ctr3'
        scanner_voltage_ranges:
            - [0, 10]
            - [0, 10]
            - [0, 10]
        scanner_position_ranges:
            - [0e-6, 80e-6]
            - [0e-6, 80e-6]
            - [-40e-6, 40e-6]

    timetagger_fastcounter:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 7
        timetagger_channel_apd_1: 1
        timetagger_channel_detect: 6
        timetagger_channel_sequence: 5
        timetagger_sum_channels: True

    timetagger_count_between_markers:
        module.Class: 'swabian_instruments.timetagger_between_markers.TimeTagger_CountBetweenMarkers'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        timetagger_channel_start: 6
        timetagger_channel_end: 7
        timetagger_channel_detect: 4
        timetagger_channel_sequence: 5
        timetagger_sum_channels: 0

    timetagger_slowcounter:
        timetagger_serial : '1634000FWL'
        module.Class: 'timetagger_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        timetagger_sum_channels: True

    tt_odmr:
        module.Class: 'timetagger_odmr_counter.TimeTaggerODMRCounter'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        timetagger_channel_trigger: 6

    piscanner:
        module.Class: 'piezo.pi_piezo_controller.PIPiezoController'
        ipaddress : '192.168.0.8'
        ipport : 50000
        stages : ['S-330.8SH', 'S-330.8SH']
        scanner_position_ranges:
            - [0., 10000.]
            - [0., 10000.]
            - [0., 100.]
        x_scanner : '1'
        y_scanner : '2'

    mw_smf100a:
        module.Class: 'microwave.mw_source_smf100a.MicrowaveSMF'
        smf_visa_address: 'TCPIP0::192.168.0.6::inst0::INSTR'
        smf_timeout: 100

    heater:
        module.Class: 'RundS_power_supply_NGPX_70-5.Power_supply'
        gpib_address: 'GPIB0::17::INSTR' ## {'x': 'gpib0::15', 'y': 'gpib0::16', 'z': 'gpib0::17'}
        gpib_timeout: 30

    SMC_controller:
        module.Class: 'magnet.SMC_controller.SMC'

    awg_spectrum:
        module.Class: 'awg.spectrum_awg663.AWG663'
        awg_ip_address: 192.168.0.4
        timeout: 30

    laser_toptica:
        module.Class: 'laser.toptica_ibeam_laser.TopticaIBeamLaser'
        com_port: 'COM1'
        maxpower: 0.1
        maxcurrent: 0.246

    nanonis_coarse_motion:
        module.Class: 'piezo.nanonis_coarse_motion.NanonisCoarseMotion'
        vi_path_casestruct_tcp_alpha : "C:\\Program Files\\National Instruments\\LabVIEW 2018\\user.lib\\Nanonis Prog Interface\\test\\case_struct_tcp_alpha.vi"
        vi_path_prog_interface_openappref : "C:\\Program Files\\National Instruments\\LabVIEW 2018\\user.lib\\Nanonis Prog Interface\\Utilities\\Prog Interface - OpenAppRef.vi"
        vi_path_motor_frequency_amplitude_get : "C:\\Program Files\\National Instruments\\LabVIEW 2018\\user.lib\\Nanonis Prog Interface\\Coarse motion\\Motor Frequency Amplitude Get.vi"
        vi_path_motor_frequency_amplitude_set : "C:\\Program Files\\National Instruments\\LabVIEW 2018\\user.lib\\Nanonis Prog Interface\\Coarse motion\\Motor Frequency Amplitude Set.vi"
        vi_path_motor_start_move : "C:\\Program Files\\National Instruments\\LabVIEW 2018\\user.lib\\Nanonis Prog Interface\\Coarse motion\\Motor Start Move.vi"
        vi_path_motor_step_counter_get : "C:\\Program Files\\National Instruments\\LabVIEW 2018\\user.lib\\Nanonis Prog Interface\\Coarse motion\\Motor Step Counter Get.vi"
        vi_path_motor_stop_move : "C:\\Program Files\\National Instruments\\LabVIEW 2018\\user.lib\\Nanonis Prog Interface\\Coarse motion\\Motor Stop Move.vi"
        sample_group : 0
        tip_group : 1

    attocube_anc350:
        module.Class: 'piezo.attocube_ANC.ANCController'
        dll_location : 'C:\\qudi\\thirdparty\\attocube\\win64\\anc350v2.dll'
        # Double check the controller numbers before using
        sample_controller_number : 0
        tip_controller_number : 1

    lakeshore_224tm:
        module.Class: 'temperature.lakeshore_temperature_monitor.Lakeshore224TM'
        ip_address : '192.168.0.12'
        ip_port : 7777
        timeout : 2
        baseplate_channel : 'C4'
        tip_channel : 'C2'
        sample_channel : 'C0'

    pfeiffer_tpg366:
        module.Class: 'pressure.pfeiffer_pressure_controller.PfeifferTPG366'
        com_port : 'COM2'
        timeout : 2
        main_gauge : 1
        prep_gauge : 2
        back_gauge : 3

    twickenham_hdi:
        module.Class: 'hdi.twickenham_hdi.TwickenhamHDI'
        com_port : 'COM1'
        channel : 'P0' # Channel A or B
        meas_speed : 'M2' # Slow or fast measurement

    mydummyswitch1:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    mydummyswitch2:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    laserdummy:
        module.Class: 'laser.simple_laser_dummy.SimpleLaserDummy'

    mydummyfastcounter:
        module.Class: 'fast_counter_dummy.FastCounterDummy'
        #choose_trace: True
        #gated: False

    mydummyscanner:
        module.Class: 'confocal_scanner_dummy.ConfocalScannerDummy'
        clock_frequency: 100
        connect:
            fitlogic: 'fit'

logic:

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'timetagger_slowcounter'
            savelogic: 'save'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_slow_counter_interfuse'
            savelogic: 'save'

    scanner_slow_counter_interfuse:
        module.Class: 'interfuse.confocal_scanner_slow_counter_interfuse.SlowCounterScannerInterfuse'
        connect:
            confocalscanner1: 'piscanner'
            counter1: 'timetagger_slowcounter'

    laserlogic:
        module.Class: 'laser_logic.LaserLogic'
        query_interval: 100
        connect:
            laser: 'laser_toptica'

    temperaturemonitorlogic:
        module.Class: 'temperature_monitor_logic.TemperatureMonitorLogic'
        query_interval: 100
        connect:
            tm: 'lakeshore_224tm'

    pressuremonitorlogic:
        module.Class: 'pressure_monitor_logic.PressureMonitorLogic'
        query_interval: 100
        connect:
            pm: 'pfeiffer_tpg366'

    depthindicatorlogic:
        module.Class: 'depth_indicator_logic.DepthIndicatorLogic'
        connect:
            hdi: 'twickenham_hdi'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimizer1: 'optimizerlogic'
            savelogic: 'save'

    odmrlogic:
        module.Class: 'odmr_awg_logic.ODMRAWGLogic'
        scanmode: 'LIST'
        connect:
            odmrcounter: 'tt_odmr'
            fitlogic: 'fit'
            microwave1: 'mw_smf100a'
            savelogic: 'save'
            taskrunner: 'tasklogic'
            pulsegenerator: 'awg_spectrum'

    laserscanner:
        module.Class: 'laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'nicard'
            savelogic: 'save'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'scanner_slow_counter_interfuse'

    magnet_control_logic:
        module.Class: 'magnet_control_logic.MagnetControlLogic'
        connect:
            counter: 'counterlogic'
            magnetstage: 'SMC_controller'
            savelogic: 'save'
            fitlogic: 'fit'

    qdplot:
        module.Class: 'qdplot_logic.QdplotLogic'
        connect:
            savelogic: 'save'

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegenerator'

    sequencegenerator:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        assets_storage_path: C:\\Users\\finklera\\Desktop\\temp_test_qudi
        connect:
            pulsegenerator: 'AWG'

    pulseextraction:
        module.Class: 'pulsed.pulse_extractor.PulseExtractor'

    pulseanalysis:
        module.Class: 'pulsed.pulse_analyzer.PulseAnalyzer'
        connect:
            fastcounter: 'mydummyfastcounter'
            pulseextractionlogic: 'pulseextraction'
            sequencegenerator: 'sequencegenerator'
            pulsegenerator: 'AWG'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fitlogic: 'fit'
            savelogic: 'save'
            fastcounter: 'timetagger_fastcounter'
            microwave: 'mw_sgs100'
            pulsegenerator: 'AWG'

    optimizer:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_slow_counter_interfuse'
            fitlogic: 'fit'

    poimanager:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimizer1: 'optimizer'
            savelogic: 'save'

    fit:
        module.Class: 'fit_logic.FitLogic'

    save:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:\data\QudiData'
        unix_data_directory: '/$HOME/'
        log_into_daily_directory: True

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
                pausetasks:
                  - scan
                  - odmr
                needsmodules:
                    optimizer: 'optimizer'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    countergui:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocalgui:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'save'
            optimizerlogic1: 'optimizer'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    lasergui:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'

    temperaturemonitorgui:
        module.Class: 'temperature_monitor.temperature_monitor.TemperatureMonitorGUI'
        connect:
            tmlogic: 'temperaturemonitorlogic'

    pressuremonitorgui:
        module.Class: 'pressure_monitor.pressure_monitor.PressureMonitorGUI'
        connect:
            pmlogic: 'pressuremonitorlogic'

    depthindicatorgui:
        module.Class: 'hdi.helium_depth_indicator.DepthIndicatorGUI'
        connect:
            hdi_logic: 'depthindicatorlogic'

    magnet:
        module.Class: 'magnet.Magnet_control.magnet_control_gui.MagnetControlGui'
        connect:
            magnetlogic1: 'magnet_control_logic'
            savelogic: 'save'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'save'

    calculator:
        module.Class: 'magnetic_field_calculator.mf_calculator.CalculatorGui'

    poimanagergui:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanager'
            confocallogic1: 'scannerlogic'

    nv_depth_calculator:
        module.Class: 'analysis_methods.NV_depth_calculator.NVdepthGui'
        connect:
            savelogic: 'save'

    noise_spectrum_calculator:
        module.Class: 'analysis_methods.noise_spectrum.NoiseSpectrumGui'
        connect:
            savelogic: 'save'
            fitlogic: 'fit'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'

